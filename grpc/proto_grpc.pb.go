// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChittyChatServiceClient is the client API for ChittyChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyChatServiceClient interface {
	PublishMessage(ctx context.Context, in *PostMessage, opts ...grpc.CallOption) (*PostResponse, error)
	BroadcastAllMessages(ctx context.Context, in *BroadcastAllRequest, opts ...grpc.CallOption) (ChittyChatService_BroadcastAllMessagesClient, error)
	NewClientJoined(ctx context.Context, in *NewClientJoinedRequest, opts ...grpc.CallOption) (ChittyChatService_NewClientJoinedClient, error)
	ClientLeave(ctx context.Context, in *ClientLeaveRequest, opts ...grpc.CallOption) (ChittyChatService_ClientLeaveClient, error)
}

type chittyChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyChatServiceClient(cc grpc.ClientConnInterface) ChittyChatServiceClient {
	return &chittyChatServiceClient{cc}
}

func (c *chittyChatServiceClient) PublishMessage(ctx context.Context, in *PostMessage, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/ChittyChatService/PublishMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChatServiceClient) BroadcastAllMessages(ctx context.Context, in *BroadcastAllRequest, opts ...grpc.CallOption) (ChittyChatService_BroadcastAllMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChittyChatService_ServiceDesc.Streams[0], "/ChittyChatService/BroadcastAllMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &chittyChatServiceBroadcastAllMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChittyChatService_BroadcastAllMessagesClient interface {
	Recv() (*BroadcastAllResponse, error)
	grpc.ClientStream
}

type chittyChatServiceBroadcastAllMessagesClient struct {
	grpc.ClientStream
}

func (x *chittyChatServiceBroadcastAllMessagesClient) Recv() (*BroadcastAllResponse, error) {
	m := new(BroadcastAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chittyChatServiceClient) NewClientJoined(ctx context.Context, in *NewClientJoinedRequest, opts ...grpc.CallOption) (ChittyChatService_NewClientJoinedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChittyChatService_ServiceDesc.Streams[1], "/ChittyChatService/NewClientJoined", opts...)
	if err != nil {
		return nil, err
	}
	x := &chittyChatServiceNewClientJoinedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChittyChatService_NewClientJoinedClient interface {
	Recv() (*NewClientJoinedResponse, error)
	grpc.ClientStream
}

type chittyChatServiceNewClientJoinedClient struct {
	grpc.ClientStream
}

func (x *chittyChatServiceNewClientJoinedClient) Recv() (*NewClientJoinedResponse, error) {
	m := new(NewClientJoinedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chittyChatServiceClient) ClientLeave(ctx context.Context, in *ClientLeaveRequest, opts ...grpc.CallOption) (ChittyChatService_ClientLeaveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChittyChatService_ServiceDesc.Streams[2], "/ChittyChatService/ClientLeave", opts...)
	if err != nil {
		return nil, err
	}
	x := &chittyChatServiceClientLeaveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChittyChatService_ClientLeaveClient interface {
	Recv() (*ClientLeaveResponse, error)
	grpc.ClientStream
}

type chittyChatServiceClientLeaveClient struct {
	grpc.ClientStream
}

func (x *chittyChatServiceClientLeaveClient) Recv() (*ClientLeaveResponse, error) {
	m := new(ClientLeaveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChittyChatServiceServer is the server API for ChittyChatService service.
// All implementations must embed UnimplementedChittyChatServiceServer
// for forward compatibility
type ChittyChatServiceServer interface {
	PublishMessage(context.Context, *PostMessage) (*PostResponse, error)
	BroadcastAllMessages(*BroadcastAllRequest, ChittyChatService_BroadcastAllMessagesServer) error
	NewClientJoined(*NewClientJoinedRequest, ChittyChatService_NewClientJoinedServer) error
	ClientLeave(*ClientLeaveRequest, ChittyChatService_ClientLeaveServer) error
	mustEmbedUnimplementedChittyChatServiceServer()
}

// UnimplementedChittyChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChittyChatServiceServer struct {
}

func (UnimplementedChittyChatServiceServer) PublishMessage(context.Context, *PostMessage) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedChittyChatServiceServer) BroadcastAllMessages(*BroadcastAllRequest, ChittyChatService_BroadcastAllMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastAllMessages not implemented")
}
func (UnimplementedChittyChatServiceServer) NewClientJoined(*NewClientJoinedRequest, ChittyChatService_NewClientJoinedServer) error {
	return status.Errorf(codes.Unimplemented, "method NewClientJoined not implemented")
}
func (UnimplementedChittyChatServiceServer) ClientLeave(*ClientLeaveRequest, ChittyChatService_ClientLeaveServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientLeave not implemented")
}
func (UnimplementedChittyChatServiceServer) mustEmbedUnimplementedChittyChatServiceServer() {}

// UnsafeChittyChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyChatServiceServer will
// result in compilation errors.
type UnsafeChittyChatServiceServer interface {
	mustEmbedUnimplementedChittyChatServiceServer()
}

func RegisterChittyChatServiceServer(s grpc.ServiceRegistrar, srv ChittyChatServiceServer) {
	s.RegisterService(&ChittyChatService_ServiceDesc, srv)
}

func _ChittyChatService_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChatServiceServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChatService/PublishMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChatServiceServer).PublishMessage(ctx, req.(*PostMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChatService_BroadcastAllMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BroadcastAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChatServiceServer).BroadcastAllMessages(m, &chittyChatServiceBroadcastAllMessagesServer{stream})
}

type ChittyChatService_BroadcastAllMessagesServer interface {
	Send(*BroadcastAllResponse) error
	grpc.ServerStream
}

type chittyChatServiceBroadcastAllMessagesServer struct {
	grpc.ServerStream
}

func (x *chittyChatServiceBroadcastAllMessagesServer) Send(m *BroadcastAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChittyChatService_NewClientJoined_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewClientJoinedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChatServiceServer).NewClientJoined(m, &chittyChatServiceNewClientJoinedServer{stream})
}

type ChittyChatService_NewClientJoinedServer interface {
	Send(*NewClientJoinedResponse) error
	grpc.ServerStream
}

type chittyChatServiceNewClientJoinedServer struct {
	grpc.ServerStream
}

func (x *chittyChatServiceNewClientJoinedServer) Send(m *NewClientJoinedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChittyChatService_ClientLeave_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientLeaveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChatServiceServer).ClientLeave(m, &chittyChatServiceClientLeaveServer{stream})
}

type ChittyChatService_ClientLeaveServer interface {
	Send(*ClientLeaveResponse) error
	grpc.ServerStream
}

type chittyChatServiceClientLeaveServer struct {
	grpc.ServerStream
}

func (x *chittyChatServiceClientLeaveServer) Send(m *ClientLeaveResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChittyChatService_ServiceDesc is the grpc.ServiceDesc for ChittyChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittyChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChatService",
	HandlerType: (*ChittyChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _ChittyChatService_PublishMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BroadcastAllMessages",
			Handler:       _ChittyChatService_BroadcastAllMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewClientJoined",
			Handler:       _ChittyChatService_NewClientJoined_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientLeave",
			Handler:       _ChittyChatService_ClientLeave_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
